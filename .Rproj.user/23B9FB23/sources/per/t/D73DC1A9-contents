"
Shiny app v0.2

Author: Pedro Alencar

14.01.2023
"

#%% Load packages --------------------------------------------------------------
pacman::p_load(
  dplyr,
  tidyr,
  ggplot2,
  magrittr,
  shiny,
  shinythemes,
  plotly,
  leaflet,
  RColorBrewer,
  fst,
  tibble,
  tibbletime,
  lubridate,
  sf
)

#%% Load datasets --------------------------------------------------------------
df <- fst::read_fst("./pre-processing/crop_bb_complete.bin")

for (i in 1:nrow(df)) {
  if (is.na(df$P_per_A[i])) {
    df$P_per_A[i] <- df$P_t[i] / df$A_ha[i]
  }
}


borders <- sf::read_sf("./GIS/bbr.shp")
borders$GEN <-
  c(
    "Berlin",
    "Brandenburg an der Havel (KfS)",
    "Cottbus (KfS)",
    "Frankfurt (Oder) (KfS)",
    "Potsdam (KfS)",
    "Barnim",
    "Dahme-Spreewald",
    "Elbe-Elster",
    "Havelland",
    "Maerkisch-Oderland",
    "Oberhavel",
    "Oberspreewald-Lausitz",
    "Oder-Spree",
    "Ostprignitz-Ruppin",
    "Potsdam-Mittelmark",
    "Prignitz",
    "Spree-NeiÃŸe",
    "Teltow-Flaeming",
    "Uckermark"
  )

names(borders)[names(borders) == "GEN"] <- "Landkreis"

# menu choices
landkreise <- unique(df$Landkreis)
crops <- unique(df$Crop)
varieties <- unique(filter(df, Crop == "Getreide")$Variety)

if (interactive()) {
#%% User interface -------------------------------------------------------------
ui <- fluidPage(
  title = "Crops in Berlin-Brandenburg",

  titlePanel("Crops in Berlin-Brandenburg"),

  fluidRow(
    column(
      4,
      h4("Select map parameters:"),
      # add menus for selections ----
      selectInput(
        "crop_",
        "Choose crop type",
        choices = crops,
        selected = "Getreide"
      ),
      selectInput(
        "variety_",
        "Choose crop variety",
        choices = varieties,
        selected = "Getreide insgesamt"
      ),
      selectInput(
        "landkreis_",
        "Choose Landkreis",
        choices = landkreise,
        selected = "Barnim"
      ),
      sliderInput(
        "year_",
        "Choose year",
        min = 2006,
        max = 2021,
        value = c(2016)
      ),
    ),
    # show map with states and production values ----
    column(8, offset = 0, #
           leafletOutput("Map1")),
  ),
  # Plots with time series ----
  fluidRow(column(12,
                  hr(), # horizontal line
                  h4("add here the plots with time series")),

  )
)

#%% The server: processing -----------------------------------------------------
server <- function(input, output, session) {

  # waits for changes in crop selection to update variety list
  observeEvent(input$crop_, label = "update_variety_list",{
    crop <- input$crop_

    varieties <- df %>%
      dplyr::filter(Crop == crop) %>%
      select(Variety) %>%
      unique() %>% unlist() %>%
      data.frame() %>%
      magrittr::set_names("var")

    updateSelectInput(
      session,
      "variety_",
      label = paste0("Choose crop variety - ", crop),
      choices = varieties,
      selected = "Getreide insgesamt"
    )
  })

  # grabs input and creates
  observe(label = "map_desing",{
    crop <- input$crop_
    variety <- input$variety_
    year <- input$year_
    landkreis <- input$landkreis_

    # get selection production
    prod <- df %>% filter(Crop == input$crop_,
                          Year == input$year_,
                          Variety == input$variety_)

    borders_plot <-
      suppressMessages(left_join(borders, prod)) #update borders, keep quiet
    border_select <-
      borders_plot %>% filter(Landkreis == landkreis)


    # get leaflet scale
    bins <-
      seq(0, ceiling(max(c(
        borders_plot$P_per_A, 0
      ), na.rm = T)), length.out = 5)
    pal <-
      colorBin("YlOrRd", domain = borders_plot$P_per_A, bins = bins)

    # define label features for leaflet map
    output$Map1 <- renderLeaflet({
      labels <- sprintf(
        "<strong>%s</strong><br/>%g Mg.ha<sup> -1</sup><br/>%g ha<br/>%g Mg",
        borders_plot$Landkreis,
        borders_plot$P_per_A,
        borders_plot$A_ha,
        borders_plot$P_t
      ) %>% lapply(htmltools::HTML)

      leaflet() %>%
        addTiles() %>%
        addPolygons(
          data = border_select,
          weight = 3,
          opacity = 1,
          color = "black",
          fillOpacity = 1,
          dashArray = "1"
        ) %>%
        addPolygons(
          data = borders_plot,
          fillColor = ~ pal(P_per_A), # show production per area
          weight = 2,
          opacity = 1,
          color = "white",
          dashArray = "3",
          fillOpacity = 0.7,
          highlightOptions = highlightOptions(
            weight = 5,
            color = "#666",
            dashArray = "",
            fillOpacity = 0.5,
            bringToFront = TRUE
          ),
          label = labels, # in labels, show all production fetures
          labelOptions = labelOptions(
            style = list("font-weight" = "normal", padding = "3px 8px"),
            textsize = "15px",
            direction = "auto"
          )
        )
    })

  })

}

#%% Build app ------------------------------------------------------------------
shinyApp(ui, server)
}
