"
Shiny app v0.1

Author: Pedro Alencar

13.01.2023
"

#%% Load packages --------------------------------------------------------------
pacman::p_load(
  dplyr,
  tidyr,
  ggplot2,
  magrittr,
  shiny,
  shinythemes,
  plotly,
  leaflet,
  RColorBrewer,
  fst,
  tibble,
  tibbletime,
  lubridate,
  sf
)

#%% Load datasets --------------------------------------------------------------

df <- fst::read_fst("./pre-processing/crop_bb_complete.bin")

for (i in 1:nrow(df)) {
  if (is.na(df$P_per_A[i])) {
    df$P_per_A[i] <- df$P_t[i] / df$A_ha[i]
  }
}


borders <- sf::read_sf("./GIS/bbr.shp")
borders$GEN <-
  c(
    "Berlin",
    "Brandenburg an der Havel (KfS)",
    "Cottbus (KfS)",
    "Frankfurt (Oder) (KfS)",
    "Potsdam (KfS)",
    "Barnim",
    "Dahme-Spreewald",
    "Elbe-Elster",
    "Havelland",
    "Maerkisch-Oderland",
    "Oberhavel",
    "Oberspreewald-Lausitz",
    "Oder-Spree",
    "Ostprignitz-Ruppin",
    "Potsdam-Mittelmark",
    "Prignitz",
    "Spree-NeiÃŸe",
    "Teltow-Flaeming",
    "Uckermark"
  )

names(borders)[names(borders) == "GEN"] <- "Landkreis"

# menu choices
landkreise <- unique(df$Landkreis)
crops <- unique(df$Crop)
varieties <- unique(filter(df, Crop == "Getreide")$Variety)

#%% User interface -------------------------------------------------------------

if (interactive()) {
  # Only run examples in interactive R sessions

  ui <- fluidPage(
    # App title ----
    titlePanel("Crops in Berlin-Brandenburg"),

    # Sidebar layout with input and output definitions ----
    sidebarLayout(
      # Sidebar panel for inputs ----
      sidebarPanel(
        h4("Select map parameters:"),
        # Input: Slider for the number of bins ----
        selectInput(
          "crop_",
          "Choose crop type",
          choices = crops,
          selected = "Getreide"
        ),
        # br(),
        selectInput(
          "variety_",
          "Choose crop variety",
          choices = varieties,
          selected = "Getreide insgesamt"
        ),
        selectInput(
          "landkreis_",
          "Choose Landkreis",
          choices = landkreise,
          selected = "Barnim"
        ),
        # br(),
        sliderInput(
          "year_",
          "Choose year",
          min = 2006,
          max = 2021,
          value = c(2016)
        ),
        # br(),
        # actionButton(
        #   inputId = "update1",
        #   label = "Update Map",
        #   icon("refresh"),
        #   width = "100%"
        # ),

      ),


      # Main panel for displaying outputs ----
      mainPanel(tabsetPanel(
        type = "tabs",
        tabPanel("Map", leafletOutput("Map1")),
        tabPanel("Time series", plotlyOutput("Plot1")),
      )),
    )
  )

  #%% The server: processing -----------------------------------------------------
  server <- function(input, output, session) {
    observeEvent(input$crop_, {
      crop <- input$crop_

      varieties <- df %>%
        dplyr::filter(Crop == crop) %>%
        select(Variety) %>%
        unique() %>% unlist() %>%
        data.frame() %>%
        magrittr::set_names("var")

      updateSelectInput(
        session,
        "variety_",
        label = paste0("Choose crop variety - ", crop),
        choices = varieties,
        selected = "Getreide insgesamt"
      )
    })

    observe({
      crop <- input$crop_
      variety <- input$variety_
      year <- input$year_
      landkreis <- input$landkreis_

      # get selection production
      prod <- df %>% filter(Crop == input$crop_,
                            Year == input$year_,
                            Variety == input$variety_)

      borders_plot <-
        suppressMessages(left_join(borders, prod)) #update borders
      border_select <- borders_plot %>% filter(Landkreis == landkreis)


      # get leaflet scale
      bins <-
        seq(0, ceiling(max(c(
          borders_plot$P_per_A, 0
        ), na.rm = T)), length.out = 5)
      pal <-
        colorBin("YlOrRd", domain = borders_plot$P_per_A, bins = bins)

      output$Map1 <- renderLeaflet({
        labels <- sprintf(
          "<strong>%s</strong><br/>%g Mg.ha<sup> -1</sup><br/>%g ha<br/>%g Mg",
          borders_plot$Landkreis,
          borders_plot$P_per_A,
          borders_plot$A_ha,
          borders_plot$P_t
        ) %>% lapply(htmltools::HTML)

        leaflet() %>%
          addTiles() %>%
          addPolygons(
            data = border_select,
            weight = 3,
            opacity = 1,
            color = "black",
            fillOpacity = 1,
            dashArray = "1"
          ) %>%
          addPolygons(
            data = borders_plot,
            fillColor = ~ pal(P_per_A),
            weight = 2,
            opacity = 1,
            # color = ifelse(Landkreis==landkreis, "darkgrey", "white"),
            color = "white",
            dashArray = "3",
            fillOpacity = 0.7,
            highlightOptions = highlightOptions(
              weight = 5,
              color = "#666",
              dashArray = "",
              fillOpacity = 0.5,
              bringToFront = TRUE
            ),
            label = labels,
            labelOptions = labelOptions(
              style = list("font-weight" = "normal", padding = "3px 8px"),
              textsize = "15px",
              direction = "auto"
            )
          )
      })

      output$Plot1 <- renderPlotly({
        #### plot time series

      })

    })
  }

  #%% Build app ------------------------------------------------------------------
  shinyApp(ui, server)
}
